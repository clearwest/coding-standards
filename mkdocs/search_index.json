{
    "docs": [
        {
            "location": "/", 
            "text": "ClearWest Coding Standards\n\n\nThe purpose of this project is to house all our official coding standards under one roof.  \nClearWest\n engineers and developers are expected to follow these guidelines for internal projects, and \nshould\n follow them for external (client) projects as well, UNLESS the client has their own differing coding standards.\n\n\nThese standards are a combination of various sources, mixed with our own in-house experience.  Their collective purpose is to make code easier to read and maintain, minimize bugs, and be consistent across projects.\n\n\nThis site is a work in progress -- we've started by covering the most common languages we use every day, and will of course be adding more as soon as possible (e.g. Python, Ruby, the C's, etc.)", 
            "title": "Home"
        }, 
        {
            "location": "/#clearwest-coding-standards", 
            "text": "The purpose of this project is to house all our official coding standards under one roof.   ClearWest  engineers and developers are expected to follow these guidelines for internal projects, and  should  follow them for external (client) projects as well, UNLESS the client has their own differing coding standards.  These standards are a combination of various sources, mixed with our own in-house experience.  Their collective purpose is to make code easier to read and maintain, minimize bugs, and be consistent across projects.  This site is a work in progress -- we've started by covering the most common languages we use every day, and will of course be adding more as soon as possible (e.g. Python, Ruby, the C's, etc.)", 
            "title": "ClearWest Coding Standards"
        }, 
        {
            "location": "/php/php-coding-standards/", 
            "text": "PHP Coding Standards\n\n\nThese guidelines are based on the \nWordPress PHP Coding Standards\n (similar to the PEAR standards), but have been modified to serve as a general purpose standard for any PHP code.\n\n\nSingle and Double Quotes\n\n\nUse single and double quotes when appropriate. If you\u2019re not evaluating anything in the string, use single quotes. You should almost never have to escape quotes in a string, because you can just alternate your quoting style, like so:\n\n\necho '\na href=\n/static/link\n title=\nYeah yeah!\nLink name\n/a\n';\necho \na href='$link' title='$linktitle'\n$linkname\n/a\n;\n\n\n\n\nWP Note:\n \nText that goes into attributes should be run through \nesc_attr()\n so that single or double quotes do not end the attribute value and invalidate the HTML and cause a security issue.\n  (In other environments/frameworks, use appropriate helper functions for escaping.)\n\n\nIndentation\n\n\nYour indentation should always reflect logical structure. Use \nreal tabs and not spaces\n (thank you WordPress!), as this allows the most flexibility across clients.\n\n\nException: if you have a block of code that would be more readable if things are aligned, use spaces:\n\n\n[tab]$foo   = 'somevalue';\n[tab]$foo2  = 'somevalue2';\n[tab]$foo34 = 'somevalue3';\n[tab]$foo5  = 'somevalue4';\n\n\n\n\nFor associative arrays, values should start on a new line. Note the comma after the last array item: this is recommended because it makes it easier to change the order of the array, and makes for cleaner diffs when new items are added.\n\n\n$my_array = array(\n[tab]'foo'   =\n 'somevalue',\n[tab]'foo2'  =\n 'somevalue2',\n[tab]'foo3'  =\n 'somevalue3',\n[tab]'foo34' =\n 'somevalue3',\n);\n\n\n\n\nRule of thumb: Tabs should be used at the beginning of the line for indentation, while spaces can be used mid-line for alignment.\n\n\nBrace Style\n\n\nBraces shall be used for all blocks in the style shown here:\n\n\nif ( condition ) {\n    action1();\n    action2();\n} elseif ( condition2 \n condition3 ) {\n    action3();\n    action4();\n} else {\n    defaultaction();\n}\n\n\n\n\nFurthermore, if you have a really long block, consider whether it can be broken into two or more shorter blocks or functions. If you consider such a long block unavoidable, please put a short comment at the end so people can tell at glance what that ending brace ends \u2013 typically this is appropriate for a logic block, longer than about 35 rows, but any code that\u2019s not intuitively obvious can be commented.\n\n\nBraces should always be used, even when they are not required:\n\n\nif ( condition ) {\n    action0();\n}\n\nif ( condition ) {\n    action1();\n} elseif ( condition2 ) {\n    action2a();\n    action2b();\n}\n\nforeach ( $items as $item ) {\n    process_item( $item );\n}\n\n\n\n\nNote that requiring the use of braces just means that single-statement inline control structures are prohibited. You are free to use the alternative syntax for control structures (e.g. \nif\n/\nendif\n, \nwhile\n/\nendwhile\n)\u2014especially in your templates where PHP code is embedded within HTML, for instance:\n\n\n?php if ( have_posts() ) : ?\n\n    \ndiv class=\nhfeed\n\n        \n?php while ( have_posts() ) : the_post(); ?\n\n            \narticle id=\npost-\n?php the_ID() ?\n class=\n?php post_class() ?\n\n                \n!-- ... --\n\n            \n/article\n\n        \n?php endwhile; ?\n\n    \n/div\n\n\n?php endif; ?\n\n\n\n\n\nRegular Expressions\n\n\nPerl compatible regular expressions (PCRE, \npreg_\n functions) should be used in preference to their POSIX counterparts. Never use the \n/e\n switch, use \npreg_replace_callback\n instead.\n\n\nIt\u2019s most convenient to use single-quoted strings for regular expressions since, contrary to double-quoted strings, they have only two metasequences: \n\\'\n and \n\\\\\n.\n\n\nNo Shorthand PHP Tags\n\n\nImportant: Never use shorthand PHP start tags. Always use full PHP tags.\n\n\nCorrect:\n\n\n?php ... ?\n\n\n?php echo $var; ?\n\n\n\n\n\nIncorrect:\n\n\n? ... ?\n\n\n?= $var ?\n\n\n\n\n\nRemove Trailing Spaces\n\n\nRemove trailing whitespace at the end of each line of code. Omitting the closing PHP tag at the end of a file is preferred. If you use the tag, make sure you remove trailing whitespace.\n\n\nSpace Usage\n\n\nAlways put spaces after commas, and on both sides of logical, comparison, string and assignment operators.\n\n\nx == 23\nfoo \n bar\n! foo\narray( 1, 2, 3 )\n$baz . '-5'\n$term .= 'X'\n\n\n\n\nPut spaces on both sides of the opening and closing parenthesis of \nif\n, \nelseif\n, \nforeach\n, \nfor\n, and \nswitch\n blocks.\n\n\nforeach ( $foo as $bar ) { ...\n\n\n\n\nWhen defining a function, do it like so:\n\n\nfunction my_function( $param1 = 'foo', $param2 = 'bar' ) { ...\n\n\n\n\nWhen calling a function, do it like so:\n\n\nmy_function( $param1, func_param( $param2 ) );\n\n\n\n\nWhen performing logical comparisons, do it like so:\n\n\nif ( ! $foo ) { ...\n\n\n\n\nWhen type casting, do it like so:\n\n\nforeach ( (array) $foo as $bar ) { ...\n\n$foo = (boolean) $bar;\n\n\n\n\nWhen referring to array items, only include a space around the index if it is a variable, for example:\n\n\n$x = $foo['bar']; // correct\n$x = $foo[ 'bar' ]; // incorrect\n\n$x = $foo[0]; // correct\n$x = $foo[ 0 ]; // incorrect\n\n$x = $foo[ $bar ]; // correct\n$x = $foo[$bar]; // incorrect\n\n\n\n\nFormatting SQL statements\n\n\nWhen formatting SQL statements you may break it into several lines and indent if it is sufficiently complex to warrant it. Most statements work well as one line though. Always capitalize the SQL parts of the statement like \nUPDATE\n or \nWHERE\n.\n\n\n\n\nBe sure to escape inputs using the best practice for whichever environment/framework you are using\n\n\n\n\n\n\nWordpress: \nhttps://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#formatting-sql-statements\n\n\n\n\nNaming Conventions\n\n\nUse lowercase letters in variable, action, and function names (never camelCase). Separate words via underscores. Don\u2019t abbreviate variable names un-necessarily; let the code be unambiguous and self-documenting.\n\n\nfunction some_name( $some_variable ) { [...] }\n\n\n\n\nClass names should use capitalized words separated by underscores. Any acronyms should be all upper case.\n\n\nclass Walker_Category extends Walker { [...] }\nclass WP_HTTP { [...] }\n\n\n\n\nConstants should be in all upper-case with underscores separating words:\n\n\ndefine( 'DOING_AJAX', true );\n\n\n\n\nFiles should be named descriptively using lowercase letters. Hyphens should separate words.\n\n\nmy-plugin-name.php\n\n\n\n\nClass file names should be based on the class name with \nclass-\n prepended and the underscores in the class name replaced with hyphens, for example \nWP_Error\n becomes:\n\n\nclass-wp-error.php\n\n\n\n\nSelf-Explanatory Flag Values for Function Arguments\n\n\nPrefer string values to just \ntrue\n and \nfalse\n when calling functions.\n\n\n// Incorrect\nfunction eat( $what, $slowly = true ) {\n...\n}\neat( 'mushrooms' );\neat( 'mushrooms', true ); // what does true mean?\neat( 'dogfood', false ); // what does false mean? The opposite of true?\n\n\n\n\nSince PHP doesn\u2019t support named arguments, the values of the flags are meaningless, and each time we come across a function call like the examples above, we have to search for the function definition. The code can be made more readable by using descriptive string values, instead of booleans.\n\n\n// Correct\nfunction eat( $what, $speed = 'slowly' ) {\n...\n}\neat( 'mushrooms' );\neat( 'mushrooms', 'slowly' );\neat( 'dogfood', 'quickly' );\n\n\n\n\nWhen more words are needed to describe the function parameters, an $args array may be a better pattern.\n\n\n// Even Better\nfunction eat( $what, $args ) {\n...\n}\neat ( 'noodles', array( 'speed' =\n 'moderate' ) );\n\n\n\n\nTernary Operator\n\n\nTernary operators are fine, but always have them test if the statement is true, not false. Otherwise, it just gets confusing. (An exception would be using ! empty(), as testing for false here is generally more intuitive.)\n\n\nFor example:\n\n\n// (if statement is true) ? (do this) : (else, do this);\n$musictype = ( $music === 'jazz' ) ? 'cool' : 'blah';\n// (if field is not empty ) ? (do this) : (else, do this);\n\n\n\n\nYoda Conditions\n\n\nOne area we disagree with the Wordpress standard is Yoda Conditions... we'd prefer you didn't use them.   It's easier to read conditionals in the normal order \nif ( something === true )\n, just remember to use the correct number of equals signs (3 by default for strict comparsions, unless you explicitly \nwant\n type juggling).\n\n\nClever Code\n\n\nIn general, readability is more important than cleverness or brevity.\n\n\nisset( $var ) || $var = some_function();\n\n\n\n\nAlthough the above line is clever, it takes a while to grok if you\u2019re not familiar with it. So, just write it like this:\n\n\nif ( ! isset( $var ) ) {\n    $var = some_function();\n}\n\n\n\n\nError Control Operator @\n\n\nDon't use it unless you really \nREALLY\n have to, you lazy bastard\n\n\nAs noted in the \nPHP docs\n:\n\n\n\n\nPHP supports one error control operator: the at sign (@). When prepended to an expression in PHP, any error messages that might be generated by that expression will be ignored.\n\n\n\n\nWhile this operator does exist in WordPress Core, it is often used lazily instead of doing proper error checking. Its use is highly discouraged, as even the PHP docs also state:\n\n\n\n\nWarning: Currently the \u201c@\u201d error-control operator prefix will even disable error reporting for critical errors that will terminate script execution. Among other things, this means that if you use \u201c@\u201d to suppress errors from a certain function and either it isn\u2019t available or has been mistyped, the script will die right there with no indication as to why.\n\n\n\n\nDon\u2019t extract()\n\n\n\n\nextract() is a terrible function that makes code harder to debug and harder to understand. We should discourage it\u2019s use and remove all of our uses of it.\n\n\n\n\nJoseph Scott has a \ngood write-up of why it\u2019s bad\n.", 
            "title": "PHP Coding Standards"
        }, 
        {
            "location": "/php/php-coding-standards/#php-coding-standards", 
            "text": "These guidelines are based on the  WordPress PHP Coding Standards  (similar to the PEAR standards), but have been modified to serve as a general purpose standard for any PHP code.", 
            "title": "PHP Coding Standards"
        }, 
        {
            "location": "/php/php-coding-standards/#single-and-double-quotes", 
            "text": "Use single and double quotes when appropriate. If you\u2019re not evaluating anything in the string, use single quotes. You should almost never have to escape quotes in a string, because you can just alternate your quoting style, like so:  echo ' a href= /static/link  title= Yeah yeah! Link name /a ';\necho  a href='$link' title='$linktitle' $linkname /a ;  WP Note:   Text that goes into attributes should be run through  esc_attr()  so that single or double quotes do not end the attribute value and invalidate the HTML and cause a security issue.   (In other environments/frameworks, use appropriate helper functions for escaping.)", 
            "title": "Single and Double Quotes"
        }, 
        {
            "location": "/php/php-coding-standards/#indentation", 
            "text": "Your indentation should always reflect logical structure. Use  real tabs and not spaces  (thank you WordPress!), as this allows the most flexibility across clients.  Exception: if you have a block of code that would be more readable if things are aligned, use spaces:  [tab]$foo   = 'somevalue';\n[tab]$foo2  = 'somevalue2';\n[tab]$foo34 = 'somevalue3';\n[tab]$foo5  = 'somevalue4';  For associative arrays, values should start on a new line. Note the comma after the last array item: this is recommended because it makes it easier to change the order of the array, and makes for cleaner diffs when new items are added.  $my_array = array(\n[tab]'foo'   =  'somevalue',\n[tab]'foo2'  =  'somevalue2',\n[tab]'foo3'  =  'somevalue3',\n[tab]'foo34' =  'somevalue3',\n);  Rule of thumb: Tabs should be used at the beginning of the line for indentation, while spaces can be used mid-line for alignment.", 
            "title": "Indentation"
        }, 
        {
            "location": "/php/php-coding-standards/#brace-style", 
            "text": "Braces shall be used for all blocks in the style shown here:  if ( condition ) {\n    action1();\n    action2();\n} elseif ( condition2   condition3 ) {\n    action3();\n    action4();\n} else {\n    defaultaction();\n}  Furthermore, if you have a really long block, consider whether it can be broken into two or more shorter blocks or functions. If you consider such a long block unavoidable, please put a short comment at the end so people can tell at glance what that ending brace ends \u2013 typically this is appropriate for a logic block, longer than about 35 rows, but any code that\u2019s not intuitively obvious can be commented.  Braces should always be used, even when they are not required:  if ( condition ) {\n    action0();\n}\n\nif ( condition ) {\n    action1();\n} elseif ( condition2 ) {\n    action2a();\n    action2b();\n}\n\nforeach ( $items as $item ) {\n    process_item( $item );\n}  Note that requiring the use of braces just means that single-statement inline control structures are prohibited. You are free to use the alternative syntax for control structures (e.g.  if / endif ,  while / endwhile )\u2014especially in your templates where PHP code is embedded within HTML, for instance:  ?php if ( have_posts() ) : ? \n     div class= hfeed \n         ?php while ( have_posts() ) : the_post(); ? \n             article id= post- ?php the_ID() ?  class= ?php post_class() ? \n                 !-- ... -- \n             /article \n         ?php endwhile; ? \n     /div  ?php endif; ?", 
            "title": "Brace Style"
        }, 
        {
            "location": "/php/php-coding-standards/#regular-expressions", 
            "text": "Perl compatible regular expressions (PCRE,  preg_  functions) should be used in preference to their POSIX counterparts. Never use the  /e  switch, use  preg_replace_callback  instead.  It\u2019s most convenient to use single-quoted strings for regular expressions since, contrary to double-quoted strings, they have only two metasequences:  \\'  and  \\\\ .", 
            "title": "Regular Expressions"
        }, 
        {
            "location": "/php/php-coding-standards/#no-shorthand-php-tags", 
            "text": "Important: Never use shorthand PHP start tags. Always use full PHP tags.  Correct:  ?php ... ?  ?php echo $var; ?   Incorrect:  ? ... ?  ?= $var ?", 
            "title": "No Shorthand PHP Tags"
        }, 
        {
            "location": "/php/php-coding-standards/#remove-trailing-spaces", 
            "text": "Remove trailing whitespace at the end of each line of code. Omitting the closing PHP tag at the end of a file is preferred. If you use the tag, make sure you remove trailing whitespace.", 
            "title": "Remove Trailing Spaces"
        }, 
        {
            "location": "/php/php-coding-standards/#space-usage", 
            "text": "Always put spaces after commas, and on both sides of logical, comparison, string and assignment operators.  x == 23\nfoo   bar\n! foo\narray( 1, 2, 3 )\n$baz . '-5'\n$term .= 'X'  Put spaces on both sides of the opening and closing parenthesis of  if ,  elseif ,  foreach ,  for , and  switch  blocks.  foreach ( $foo as $bar ) { ...  When defining a function, do it like so:  function my_function( $param1 = 'foo', $param2 = 'bar' ) { ...  When calling a function, do it like so:  my_function( $param1, func_param( $param2 ) );  When performing logical comparisons, do it like so:  if ( ! $foo ) { ...  When type casting, do it like so:  foreach ( (array) $foo as $bar ) { ...\n\n$foo = (boolean) $bar;  When referring to array items, only include a space around the index if it is a variable, for example:  $x = $foo['bar']; // correct\n$x = $foo[ 'bar' ]; // incorrect\n\n$x = $foo[0]; // correct\n$x = $foo[ 0 ]; // incorrect\n\n$x = $foo[ $bar ]; // correct\n$x = $foo[$bar]; // incorrect", 
            "title": "Space Usage"
        }, 
        {
            "location": "/php/php-coding-standards/#formatting-sql-statements", 
            "text": "When formatting SQL statements you may break it into several lines and indent if it is sufficiently complex to warrant it. Most statements work well as one line though. Always capitalize the SQL parts of the statement like  UPDATE  or  WHERE .   Be sure to escape inputs using the best practice for whichever environment/framework you are using    Wordpress:  https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#formatting-sql-statements", 
            "title": "Formatting SQL statements"
        }, 
        {
            "location": "/php/php-coding-standards/#naming-conventions", 
            "text": "Use lowercase letters in variable, action, and function names (never camelCase). Separate words via underscores. Don\u2019t abbreviate variable names un-necessarily; let the code be unambiguous and self-documenting.  function some_name( $some_variable ) { [...] }  Class names should use capitalized words separated by underscores. Any acronyms should be all upper case.  class Walker_Category extends Walker { [...] }\nclass WP_HTTP { [...] }  Constants should be in all upper-case with underscores separating words:  define( 'DOING_AJAX', true );  Files should be named descriptively using lowercase letters. Hyphens should separate words.  my-plugin-name.php  Class file names should be based on the class name with  class-  prepended and the underscores in the class name replaced with hyphens, for example  WP_Error  becomes:  class-wp-error.php", 
            "title": "Naming Conventions"
        }, 
        {
            "location": "/php/php-coding-standards/#self-explanatory-flag-values-for-function-arguments", 
            "text": "Prefer string values to just  true  and  false  when calling functions.  // Incorrect\nfunction eat( $what, $slowly = true ) {\n...\n}\neat( 'mushrooms' );\neat( 'mushrooms', true ); // what does true mean?\neat( 'dogfood', false ); // what does false mean? The opposite of true?  Since PHP doesn\u2019t support named arguments, the values of the flags are meaningless, and each time we come across a function call like the examples above, we have to search for the function definition. The code can be made more readable by using descriptive string values, instead of booleans.  // Correct\nfunction eat( $what, $speed = 'slowly' ) {\n...\n}\neat( 'mushrooms' );\neat( 'mushrooms', 'slowly' );\neat( 'dogfood', 'quickly' );  When more words are needed to describe the function parameters, an $args array may be a better pattern.  // Even Better\nfunction eat( $what, $args ) {\n...\n}\neat ( 'noodles', array( 'speed' =  'moderate' ) );", 
            "title": "Self-Explanatory Flag Values for Function Arguments"
        }, 
        {
            "location": "/php/php-coding-standards/#ternary-operator", 
            "text": "Ternary operators are fine, but always have them test if the statement is true, not false. Otherwise, it just gets confusing. (An exception would be using ! empty(), as testing for false here is generally more intuitive.)  For example:  // (if statement is true) ? (do this) : (else, do this);\n$musictype = ( $music === 'jazz' ) ? 'cool' : 'blah';\n// (if field is not empty ) ? (do this) : (else, do this);", 
            "title": "Ternary Operator"
        }, 
        {
            "location": "/php/php-coding-standards/#yoda-conditions", 
            "text": "One area we disagree with the Wordpress standard is Yoda Conditions... we'd prefer you didn't use them.   It's easier to read conditionals in the normal order  if ( something === true ) , just remember to use the correct number of equals signs (3 by default for strict comparsions, unless you explicitly  want  type juggling).", 
            "title": "Yoda Conditions"
        }, 
        {
            "location": "/php/php-coding-standards/#clever-code", 
            "text": "In general, readability is more important than cleverness or brevity.  isset( $var ) || $var = some_function();  Although the above line is clever, it takes a while to grok if you\u2019re not familiar with it. So, just write it like this:  if ( ! isset( $var ) ) {\n    $var = some_function();\n}", 
            "title": "Clever Code"
        }, 
        {
            "location": "/php/php-coding-standards/#error-control-operator", 
            "text": "Don't use it unless you really  REALLY  have to, you lazy bastard  As noted in the  PHP docs :   PHP supports one error control operator: the at sign (@). When prepended to an expression in PHP, any error messages that might be generated by that expression will be ignored.   While this operator does exist in WordPress Core, it is often used lazily instead of doing proper error checking. Its use is highly discouraged, as even the PHP docs also state:   Warning: Currently the \u201c@\u201d error-control operator prefix will even disable error reporting for critical errors that will terminate script execution. Among other things, this means that if you use \u201c@\u201d to suppress errors from a certain function and either it isn\u2019t available or has been mistyped, the script will die right there with no indication as to why.", 
            "title": "Error Control Operator @"
        }, 
        {
            "location": "/php/php-coding-standards/#dont-extract", 
            "text": "extract() is a terrible function that makes code harder to debug and harder to understand. We should discourage it\u2019s use and remove all of our uses of it.   Joseph Scott has a  good write-up of why it\u2019s bad .", 
            "title": "Don\u2019t extract()"
        }, 
        {
            "location": "/php/php-documentation-standards/", 
            "text": "PHP Documentation Standards\n\n\nSee the following:\n\n\n\n\nPHPDoc reference: \nhttp://phpdoc.org/docs/latest/references/phpdoc/index.html\n\n\nPEAR Sample: \nhttp://pear.php.net/manual/en/standards.sample.php\n\n\nWordpress: \nhttps://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/php/", 
            "title": "PHP Documentation Standards"
        }, 
        {
            "location": "/php/php-documentation-standards/#php-documentation-standards", 
            "text": "See the following:   PHPDoc reference:  http://phpdoc.org/docs/latest/references/phpdoc/index.html  PEAR Sample:  http://pear.php.net/manual/en/standards.sample.php  Wordpress:  https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/php/", 
            "title": "PHP Documentation Standards"
        }, 
        {
            "location": "/javascript/js-coding-standards/", 
            "text": "JavaScript Coding Standards\n\n\nThese guidelines are based on the \nWordPress JavaScript Coding Standards\n, but have been modified to serve as a general purpose standard for any JavaScript code.\n\n\nThe WordPress JavaScript Coding Standards are adapted from the \njQuery JavaScript Style Guide\n, but differ in the following ways:\n\n\n\n\nWordPress uses single quotation marks for string declarations.\n\n\nCase statements are indented within switch blocks.\n\n\nFunction contents are consistently indented, including full-file closure wrappers.\n\n\nSome whitespace rules differ, for consistency with the WordPress PHP coding standards.\n\n\njQuery\u2019s 100-character hard line limit is encouraged, but not strictly enforced.\n\n\n\n\nSpacing\n\n\nUse spaces liberally throughout your code. \u201cWhen in doubt, space it out.\u201d\n\n\nThese rules encourage liberal spacing for improved developer readability. The minification process creates a file that is optimized for browsers to read and process.\n\n\n\n\nIndentation with tabs.\n\n\nNo whitespace at the end of line or on blank lines.\n\n\nLines should usually be no longer than 80 characters, and should not exceed 100 (counting tabs as 4 spaces). This is a \u201csoft\u201d rule, but long lines generally indicate unreadable or disorganized code.\n\n\nif\n/\nelse\n/\nfor\n/\nwhile\n/\ntry\n blocks should \nalways use braces\n, and always go on multiple lines.\n\n\nUnary special-character operators (e.g., \n++\n, \n--\n) must not have space next to their operand.\n\n\nAny \n,\n and \n;\n must not have preceding space.\n\n\nAny \n;\n used as a statement terminator must be at the end of the line.\n\n\nAny \n:\n after a property name in an object definition must not have preceding space.\n\n\nThe \n?\n and \n:\n in a ternary conditional must have space on both sides.\n\n\nNo filler spaces in empty constructs (e.g., \n{}\n, \n[]\n, \nfn()\n).\n\n\nThere should be a new line at the end of each file.\n\n\nAny \n!\n negation operator should have a following space.\n\n\nAll function bodies are indented by one tab, even if the entire file is wrapped in a closure.\n\n\nSpaces may align code within documentation blocks or within a line, but only tabs should be used at the start of a line.\n\n\n\n\nWhitespace can easily accumulate at the end of a line \u2013 avoid this, as trailing whitespace is caught as an error in JSHint. One way to catch whitespace buildup is enabling visible whitespace characters within your text editor.\n\n\nObjects\n\n\nObject declarations can be made on a single line if they are short (remember the line length guidelines). When an object declaration is too long to fit on one line, there must be one property per line. Property names only need to be quoted if they are reserved words or contain special characters:\n\n\n// Preferred\nvar map = {\n    ready: 9,\n    when: 4,\n    'you are': 15\n};\n\n// Acceptable for small objects\nvar map = { ready: 9, when: 4, 'you are': 15 };\n\n// Bad\nvar map = { ready: 9,\n    when: 4, 'you are': 15 };\n\n\n\n\nArrays and Function Calls\n\n\nAlways include extra spaces around elements and arguments:\n\n\narray = [ a, b ];\n\nfoo( arg );\n\nfoo( 'string', object );\n\nfoo( options, object[ property ] );\n\nfoo( node, 'property', 2 );\n\n\n\n\nExceptions:\n\n\n// For consistency with our PHP standards, do not include a space around\n// string literals or integers used as key values in array notation:\nprop = object['default'];\nfirstArrayElement = arr[0];\n\n// Function with a callback, object, or array as the sole argument:\n// No space on either side of the argument\nfoo(function() {\n    // Do stuff\n});\n\nfoo({\n    a: 'alpha',\n    b: 'beta'\n});\n\nfoo([\n    'alpha',\n    'beta'\n]);\n\n// Function with a callback, object, or array as the first argument:\n// No space before the first argument\nfoo(function() {\n    // Do stuff\n}, options );\n\n// Function with a callback, object, or array as the last argument:\n// No space after after the last argument\nfoo( data, function() {\n    // Do stuff\n});\n\n\n\n\nExamples of Good Spacing\n\n\nvar i;\n\nif ( condition ) {\n    doSomething( 'with a string' );\n} else if ( otherCondition ) {\n    otherThing({\n        key: value,\n        otherKey: otherValue\n    });\n} else {\n    somethingElse( true );\n}\n\n// Unlike jQuery, WordPress prefers a space after the ! negation operator.\n// This is also done to conform to our PHP standards.\nwhile ( ! condition ) {\n    iterating++;\n}\n\nfor ( i = 0; i \n 100; i++ ) {\n    object[ array[ i ] ] = someFn( i );\n    $( '.container' ).val( array[ i ] );\n}\n\ntry {\n    // Expressions\n} catch ( e ) {\n    // Expressions\n}\n\n\n\n\nSemicolons\n\n\nAlways terminate statements with a \n;\n, even when it is considered optional.\n\n\nIndentation and Line Breaks\n\n\nIndentation and line breaks add readability to complex statements.\n\n\nTabs should be used for indentation. Even if the entire file is contained in a closure (i.e., an immediately invoked function), the contents of that function should be indented by one tab:\n\n\n(function( $ ) {\n    // Expressions indented\n\n    function doSomething() {\n        // Expressions indented\n    }\n})( jQuery );\n\n\n\n\nBlocks and Curly Braces\n\n\nif\n, \nelse\n, \nfor\n, \nwhile\n, and \ntry\n blocks should always use braces, and always go on multiple lines. The opening brace should be on the same line as the function definition, the conditional, or the loop. The closing brace should be on the line directly following the last statement of the block.\n\n\nvar a, b, c;\n\nif ( myFunction() ) {\n    // Expressions\n} else if ( ( a \n b ) || c ) {\n    // Expressions\n} else {\n    // Expressions\n}\n\n\n\n\nMulti-line Statements\n\n\nWhen a statement is too long to fit on one line, line breaks must occur after an operator.\n\n\n// Bad\nvar html = '\np\nThe sum of ' + a + ' and ' + b + ' plus ' + c\n    + ' is ' + ( a + b + c );\n\n// Good\nvar html = '\np\nThe sum of ' + a + ' and ' + b + ' plus ' + c +\n    ' is ' + ( a + b + c );\n\n\n\n\nLines should be broken into logical groups if it improves readability, such as splitting each expression of a ternary operator onto its own line, even if both will fit on a single line.\n\n\n// Acceptable\nvar baz = ( true === conditionalStatement() ) ? 'thing 1' : 'thing 2';\n\n// Better\nvar baz = firstCondition( foo ) \n secondCondition( bar ) ?\n    qux( foo, bar ) :\n    foo;\n\n\n\n\nWhen a conditional is too long to fit on one line, successive lines must be indented one extra level to distinguish them from the body.\n\n\nif ( firstCondition() \n secondCondition() \n\n        thirdCondition() ) {\n    doStuff();\n}\n\n\n\n\nChained Method Calls\n\n\nWhen a chain of method calls is too long to fit on one line, there must be one call per line, with the first call on a separate line from the object the methods are called on. If the method changes the context, an extra level of indentation must be used.\n\n\nelements\n    .addClass( 'foo' )\n    .children()\n        .html( 'hello' )\n    .end()\n    .appendTo( 'body' );\n\n\n\n\nAssignments and Globals\n\n\nDeclaring Variables With var\n\n\nEach function should begin with a single comma-delimited \nvar\n statement that declares any local variables necessary. If a function does not declare a variable using \nvar\n, that variable can leak into an outer scope (which is frequently the global scope, a worst-case scenario), and can unwittingly refer to and modify that data.\n\n\nAssignments within the \nvar\n statement should be listed on individual lines, while declarations can be grouped on a single line. Any additional lines should be indented with an additional tab. Objects and functions that occupy more than a handful of lines should be assigned outside of the var statement, to avoid over-indentation.\n\n\n// Good\nvar k, m, length,\n    // Indent subsequent lines by one tab\n    value = 'WordPress';\n\n// Bad\nvar foo = true;\nvar bar = false;\nvar a;\nvar b;\nvar c;\n\n\n\n\nGlobals\n\n\nIn the past, WordPress core made heavier use of global variables. Since core JavaScript files are sometimes used within plugins, existing globals should not be removed.\n\n\nAll globals used within a file should be documented at the top of that file. Multiple globals can be comma-separated.\n\n\nThis example would make \npasswordStrength\n an allowed global variable within that file:\n\n\n/* global passwordStrength:true */\n\n\n\n\nThe \u201ctrue\u201d after \npasswordStrength\n means that this global is being defined within this file. If you are accessing a global which is defined elsewhere, omit \n:true\n to designate the global as read-only.\n\n\nCommon Libraries\n\n\nBackbone, jQuery, Underscore, and the global \nwp\n object are all registered as allowed globals in the root \n.jshintrc\n file.\n\n\nBackbone and Underscore may be accessed directly at any time. jQuery should be accessed through \n$\n by passing the \njQuery\n object into an anonymous function:\n\n\n(function( $ ) {\n  // Expressions\n})( jQuery );\n\n\n\n\nThis will negate the need to call \n.noConflict()\n, or to set \n$\n using another variable.\n\n\nFiles which add to, or modify, the \nwp\n object must safely access the global to avoid overwriting previously set properties:\n\n\n// At the top of the file, set \nwp\n to its existing value (if present)\nwindow.wp = window.wp || {};\n\n\n\n\nNaming Conventions\n\n\nVariable and function names should be full words, using camel case with a lowercase first letter. This is an area where this standard differs from the WordPress PHP coding standards.\n\n\nConstructors intended for use with \nnew\n should have a capital first letter (UpperCamelCase).\n\n\nNames should be descriptive, but not excessively so. Exceptions are allowed for iterators, such as the use of \ni\n to represent the index in a loop.\n\n\nComments\n\n\nComments come before the code to which they refer, and should always be preceded by a blank line. Capitalize the first letter of the comment, and include a period at the end when writing full sentences. There must be a single space between the comment token (//) and the comment text.\n\n\nSingle line comments:\n\n\nsomeStatement();\n\n// Explanation of something complex on the next line\n$( 'p' ).doSomething();\n\n\n\n\nMulti-line comments should be used for long comments:\n\n\n/**\n * This is a comment that is long enough to warrant being stretched\n * over the span of multiple lines.\n */\n\n\n\n\nInline comments are allowed as an exception when used to annotate special arguments in formal parameter lists:\n\n\nfunction foo( types, selector, data, fn, /* INTERNAL */ one ) {\n    // Do stuff\n}\n\n\n\n\nEquality\n\n\nStrict equality checks (\n===\n) must be used in favor of abstract equality checks (\n==\n). The only exception is when checking for both \nundefined\n and \nnull\n by way of \nnull\n.\n\n\n// Check for both undefined and null values, for some important reason.\nif ( undefOrNull == null ) {\n    // Expressions\n}\n\n\n\n\nType Checks\n\n\nThese are the preferred ways of checking the type of an object:\n\n\n\n\nString: \ntypeof object === 'string'\n\n\nNumber: \ntypeof object === 'number'\n\n\nBoolean: \ntypeof object === 'boolean'\n\n\nObject: \ntypeof object === 'object'\n or \n_.isObject( object )\n\n\nPlain Object: \njQuery.isPlainObject( object )\n\n\nFunction: \n_.isFunction( object )\n or \njQuery.isFunction( object )\n\n\nArray: \n_.isArray( object )\n or \njQuery.isArray( object )\n\n\nElement: \nobject.nodeType\n or \n_.isElement( object )\n\n\nnull: \nobject === null\n\n\nnull or undefined: \nobject == null\n\n\nundefined:\n\n\nGlobal Variables: \ntypeof variable === 'undefined'\n\n\nLocal Variables: \nvariable === undefined\n\n\nProperties: \nobject.prop === undefined\n\n\nAny of the above: \n_.isUndefined( object )\n\n\n\n\n\n\n\n\nAnywhere Backbone or Underscore are already used, you are encouraged to use Underscore.js\u2018s type checking methods over jQuery\u2019s.\n\n\nStrings\n\n\nUse single-quotes for string literals:\n\n\nvar myStr = 'strings should be contained in single quotes';\n\n\n\n\nWhen a string contains single quotes, they need to be escaped with a backslash (\n\\\n):\n\n\n// Escape single quotes within strings:\n'Note the backslash before the \\'single quotes\\'';\n\n\n\n\nSwitch Statements\n\n\nThe usage of \nswitch\n statements is generally discouraged, but can be useful when there are a large number of cases \u2013 especially when multiple cases can be handled by the same block, or fall-through logic (the \ndefault\n case) can be leveraged.\n\n\nWhen using \nswitch\n statements:\n\n\n\u2013 Use a \nbreak\n for each case other than \ndefault\n. When allowing statements to \u201cfall through,\u201d note that explicitly.\n\u2013 Indent \ncase\n statements one tab within the \nswitch\n.\n\n\nswitch ( event.keyCode ) {\n\n    // ENTER and SPACE both trigger x()\n    case $.ui.keyCode.ENTER:\n    case $.ui.keyCode.SPACE:\n        x();\n        break;\n    case $.ui.keyCode.ESCAPE:\n        y();\n        break;\n    default:\n        z();\n}\n\n\n\n\nIt is not recommended to return a value from within a switch statement: use the \ncase\n blocks to set values, then \nreturn\n those values at the end.\n\n\nfunction getKeyCode( keyCode ) {\n    var result;\n\n    switch ( event.keyCode ) {\n        case $.ui.keyCode.ENTER:\n        case $.ui.keyCode.SPACE:\n            result = 'commit';\n            break;\n        case $.ui.keyCode.ESCAPE:\n            result = 'exit';\n            break;\n        default:\n            result = 'default';\n    }\n\n    return result;\n}\n\n\n\n\nBest Practices\n\n\nUse strict\n\n\nAll new code should \nuse strict\n (unless there's a very good reason not to).\n\n\nArrays\n\n\nCreating arrays in JavaScript should be done using the shorthand \n[]\n constructor rather than the \nnew Array()\n notation.\n\n\nvar myArray = [];\n\n\n\n\nYou can initialize an array during construction:\n\n\nvar myArray = [ 1, 'WordPress', 2, 'Blog' ];\n\n\n\n\nIn JavaScript, associative arrays are defined as objects.\n\n\nObjects\n\n\nThere are many ways to create objects in JavaScript. Object literal notation, \n{}\n, is both the most performant, and also the easiest to read.\n\n\nvar myObj = {};\n\n\n\n\nObject literal notation should be used unless the object requires a specific prototype, in which case the object should be created by calling a constructor function with \nnew\n.\n\n\nvar myObj = new ConstructorMethod();\n\n\n\n\nObject properties should be accessed via dot notation, unless the key is a variable, a reserved word, or a string that would not be a valid identifier:\n\n\nprop = object.propertyName;\nprop = object[ variableKey ];\nprop = object['default'];\nprop = object['key-with-hyphens'];\n\n\n\n\n\u201cYoda\u201d Conditions\n\n\nOne area we disagree with the Wordpress standard is Yoda Conditions... we'd prefer you didn't use them.   It's easier to read conditionals in the normal order \nif ( something === true )\n, just remember to use the correct number of equals signs.\n\n\nIteration\n\n\nWhen iterating over a large collection using a \nfor\n loop, it is recommended to store the loop\u2019s max value as a variable rather than re-computing the maximum every time:\n\n\n// Good \n Efficient\nvar i, max;\n\n// getItemCount() gets called once\nfor ( i = 0, max = getItemCount(); i \n max; i++ ) {\n    // Do stuff\n}\n\n// Bad \n Potentially Inefficient:\n// getItemCount() gets called every time\nfor ( i = 0; i \n getItemCount(); i++ ) {\n    // Do stuff\n}\n\n\n\n\nUnderscore.js Collection Functions\n\n\nLearn and understand Underscore\u2019s \ncollection and array methods\n. These functions, including \n_.each\n, \n_.map\n, and \n_.reduce\n, allow for efficient, readable transformations of large data sets.\n\n\nUnderscore also permits jQuery-style chaining with regular JavaScript objects:\n\n\nvar obj = {\n    first: 'thing 1',\n    second: 'thing 2',\n    third: 'lox'\n};\n\nvar arr = _.chain( obj )\n    .keys()\n    .map(function( key ) {\n        return key + ' comes ' + obj[ key ];\n    })\n    // Exit the chain\n    .value();\n\n// arr === [ 'first comes thing 1', 'second comes thing 2', 'third comes lox' ]\n\n\n\n\nIterating Over jQuery Collections\n\n\n$tabs.each(function( index, element ) {\n    var $element = $( element );\n\n    // Do stuff to $element\n});", 
            "title": "JavaScript Coding Standards"
        }, 
        {
            "location": "/javascript/js-coding-standards/#javascript-coding-standards", 
            "text": "These guidelines are based on the  WordPress JavaScript Coding Standards , but have been modified to serve as a general purpose standard for any JavaScript code.  The WordPress JavaScript Coding Standards are adapted from the  jQuery JavaScript Style Guide , but differ in the following ways:   WordPress uses single quotation marks for string declarations.  Case statements are indented within switch blocks.  Function contents are consistently indented, including full-file closure wrappers.  Some whitespace rules differ, for consistency with the WordPress PHP coding standards.  jQuery\u2019s 100-character hard line limit is encouraged, but not strictly enforced.", 
            "title": "JavaScript Coding Standards"
        }, 
        {
            "location": "/javascript/js-coding-standards/#spacing", 
            "text": "Use spaces liberally throughout your code. \u201cWhen in doubt, space it out.\u201d  These rules encourage liberal spacing for improved developer readability. The minification process creates a file that is optimized for browsers to read and process.   Indentation with tabs.  No whitespace at the end of line or on blank lines.  Lines should usually be no longer than 80 characters, and should not exceed 100 (counting tabs as 4 spaces). This is a \u201csoft\u201d rule, but long lines generally indicate unreadable or disorganized code.  if / else / for / while / try  blocks should  always use braces , and always go on multiple lines.  Unary special-character operators (e.g.,  ++ ,  -- ) must not have space next to their operand.  Any  ,  and  ;  must not have preceding space.  Any  ;  used as a statement terminator must be at the end of the line.  Any  :  after a property name in an object definition must not have preceding space.  The  ?  and  :  in a ternary conditional must have space on both sides.  No filler spaces in empty constructs (e.g.,  {} ,  [] ,  fn() ).  There should be a new line at the end of each file.  Any  !  negation operator should have a following space.  All function bodies are indented by one tab, even if the entire file is wrapped in a closure.  Spaces may align code within documentation blocks or within a line, but only tabs should be used at the start of a line.   Whitespace can easily accumulate at the end of a line \u2013 avoid this, as trailing whitespace is caught as an error in JSHint. One way to catch whitespace buildup is enabling visible whitespace characters within your text editor.  Objects  Object declarations can be made on a single line if they are short (remember the line length guidelines). When an object declaration is too long to fit on one line, there must be one property per line. Property names only need to be quoted if they are reserved words or contain special characters:  // Preferred\nvar map = {\n    ready: 9,\n    when: 4,\n    'you are': 15\n};\n\n// Acceptable for small objects\nvar map = { ready: 9, when: 4, 'you are': 15 };\n\n// Bad\nvar map = { ready: 9,\n    when: 4, 'you are': 15 };  Arrays and Function Calls  Always include extra spaces around elements and arguments:  array = [ a, b ];\n\nfoo( arg );\n\nfoo( 'string', object );\n\nfoo( options, object[ property ] );\n\nfoo( node, 'property', 2 );  Exceptions:  // For consistency with our PHP standards, do not include a space around\n// string literals or integers used as key values in array notation:\nprop = object['default'];\nfirstArrayElement = arr[0];\n\n// Function with a callback, object, or array as the sole argument:\n// No space on either side of the argument\nfoo(function() {\n    // Do stuff\n});\n\nfoo({\n    a: 'alpha',\n    b: 'beta'\n});\n\nfoo([\n    'alpha',\n    'beta'\n]);\n\n// Function with a callback, object, or array as the first argument:\n// No space before the first argument\nfoo(function() {\n    // Do stuff\n}, options );\n\n// Function with a callback, object, or array as the last argument:\n// No space after after the last argument\nfoo( data, function() {\n    // Do stuff\n});  Examples of Good Spacing  var i;\n\nif ( condition ) {\n    doSomething( 'with a string' );\n} else if ( otherCondition ) {\n    otherThing({\n        key: value,\n        otherKey: otherValue\n    });\n} else {\n    somethingElse( true );\n}\n\n// Unlike jQuery, WordPress prefers a space after the ! negation operator.\n// This is also done to conform to our PHP standards.\nwhile ( ! condition ) {\n    iterating++;\n}\n\nfor ( i = 0; i   100; i++ ) {\n    object[ array[ i ] ] = someFn( i );\n    $( '.container' ).val( array[ i ] );\n}\n\ntry {\n    // Expressions\n} catch ( e ) {\n    // Expressions\n}", 
            "title": "Spacing"
        }, 
        {
            "location": "/javascript/js-coding-standards/#semicolons", 
            "text": "Always terminate statements with a  ; , even when it is considered optional.", 
            "title": "Semicolons"
        }, 
        {
            "location": "/javascript/js-coding-standards/#indentation-and-line-breaks", 
            "text": "Indentation and line breaks add readability to complex statements.  Tabs should be used for indentation. Even if the entire file is contained in a closure (i.e., an immediately invoked function), the contents of that function should be indented by one tab:  (function( $ ) {\n    // Expressions indented\n\n    function doSomething() {\n        // Expressions indented\n    }\n})( jQuery );  Blocks and Curly Braces  if ,  else ,  for ,  while , and  try  blocks should always use braces, and always go on multiple lines. The opening brace should be on the same line as the function definition, the conditional, or the loop. The closing brace should be on the line directly following the last statement of the block.  var a, b, c;\n\nif ( myFunction() ) {\n    // Expressions\n} else if ( ( a   b ) || c ) {\n    // Expressions\n} else {\n    // Expressions\n}  Multi-line Statements  When a statement is too long to fit on one line, line breaks must occur after an operator.  // Bad\nvar html = ' p The sum of ' + a + ' and ' + b + ' plus ' + c\n    + ' is ' + ( a + b + c );\n\n// Good\nvar html = ' p The sum of ' + a + ' and ' + b + ' plus ' + c +\n    ' is ' + ( a + b + c );  Lines should be broken into logical groups if it improves readability, such as splitting each expression of a ternary operator onto its own line, even if both will fit on a single line.  // Acceptable\nvar baz = ( true === conditionalStatement() ) ? 'thing 1' : 'thing 2';\n\n// Better\nvar baz = firstCondition( foo )   secondCondition( bar ) ?\n    qux( foo, bar ) :\n    foo;  When a conditional is too long to fit on one line, successive lines must be indented one extra level to distinguish them from the body.  if ( firstCondition()   secondCondition()  \n        thirdCondition() ) {\n    doStuff();\n}  Chained Method Calls  When a chain of method calls is too long to fit on one line, there must be one call per line, with the first call on a separate line from the object the methods are called on. If the method changes the context, an extra level of indentation must be used.  elements\n    .addClass( 'foo' )\n    .children()\n        .html( 'hello' )\n    .end()\n    .appendTo( 'body' );", 
            "title": "Indentation and Line Breaks"
        }, 
        {
            "location": "/javascript/js-coding-standards/#assignments-and-globals", 
            "text": "Declaring Variables With var  Each function should begin with a single comma-delimited  var  statement that declares any local variables necessary. If a function does not declare a variable using  var , that variable can leak into an outer scope (which is frequently the global scope, a worst-case scenario), and can unwittingly refer to and modify that data.  Assignments within the  var  statement should be listed on individual lines, while declarations can be grouped on a single line. Any additional lines should be indented with an additional tab. Objects and functions that occupy more than a handful of lines should be assigned outside of the var statement, to avoid over-indentation.  // Good\nvar k, m, length,\n    // Indent subsequent lines by one tab\n    value = 'WordPress';\n\n// Bad\nvar foo = true;\nvar bar = false;\nvar a;\nvar b;\nvar c;  Globals  In the past, WordPress core made heavier use of global variables. Since core JavaScript files are sometimes used within plugins, existing globals should not be removed.  All globals used within a file should be documented at the top of that file. Multiple globals can be comma-separated.  This example would make  passwordStrength  an allowed global variable within that file:  /* global passwordStrength:true */  The \u201ctrue\u201d after  passwordStrength  means that this global is being defined within this file. If you are accessing a global which is defined elsewhere, omit  :true  to designate the global as read-only.  Common Libraries  Backbone, jQuery, Underscore, and the global  wp  object are all registered as allowed globals in the root  .jshintrc  file.  Backbone and Underscore may be accessed directly at any time. jQuery should be accessed through  $  by passing the  jQuery  object into an anonymous function:  (function( $ ) {\n  // Expressions\n})( jQuery );  This will negate the need to call  .noConflict() , or to set  $  using another variable.  Files which add to, or modify, the  wp  object must safely access the global to avoid overwriting previously set properties:  // At the top of the file, set  wp  to its existing value (if present)\nwindow.wp = window.wp || {};", 
            "title": "Assignments and Globals"
        }, 
        {
            "location": "/javascript/js-coding-standards/#naming-conventions", 
            "text": "Variable and function names should be full words, using camel case with a lowercase first letter. This is an area where this standard differs from the WordPress PHP coding standards.  Constructors intended for use with  new  should have a capital first letter (UpperCamelCase).  Names should be descriptive, but not excessively so. Exceptions are allowed for iterators, such as the use of  i  to represent the index in a loop.", 
            "title": "Naming Conventions"
        }, 
        {
            "location": "/javascript/js-coding-standards/#comments", 
            "text": "Comments come before the code to which they refer, and should always be preceded by a blank line. Capitalize the first letter of the comment, and include a period at the end when writing full sentences. There must be a single space between the comment token (//) and the comment text.  Single line comments:  someStatement();\n\n// Explanation of something complex on the next line\n$( 'p' ).doSomething();  Multi-line comments should be used for long comments:  /**\n * This is a comment that is long enough to warrant being stretched\n * over the span of multiple lines.\n */  Inline comments are allowed as an exception when used to annotate special arguments in formal parameter lists:  function foo( types, selector, data, fn, /* INTERNAL */ one ) {\n    // Do stuff\n}", 
            "title": "Comments"
        }, 
        {
            "location": "/javascript/js-coding-standards/#equality", 
            "text": "Strict equality checks ( === ) must be used in favor of abstract equality checks ( == ). The only exception is when checking for both  undefined  and  null  by way of  null .  // Check for both undefined and null values, for some important reason.\nif ( undefOrNull == null ) {\n    // Expressions\n}", 
            "title": "Equality"
        }, 
        {
            "location": "/javascript/js-coding-standards/#type-checks", 
            "text": "These are the preferred ways of checking the type of an object:   String:  typeof object === 'string'  Number:  typeof object === 'number'  Boolean:  typeof object === 'boolean'  Object:  typeof object === 'object'  or  _.isObject( object )  Plain Object:  jQuery.isPlainObject( object )  Function:  _.isFunction( object )  or  jQuery.isFunction( object )  Array:  _.isArray( object )  or  jQuery.isArray( object )  Element:  object.nodeType  or  _.isElement( object )  null:  object === null  null or undefined:  object == null  undefined:  Global Variables:  typeof variable === 'undefined'  Local Variables:  variable === undefined  Properties:  object.prop === undefined  Any of the above:  _.isUndefined( object )     Anywhere Backbone or Underscore are already used, you are encouraged to use Underscore.js\u2018s type checking methods over jQuery\u2019s.", 
            "title": "Type Checks"
        }, 
        {
            "location": "/javascript/js-coding-standards/#strings", 
            "text": "Use single-quotes for string literals:  var myStr = 'strings should be contained in single quotes';  When a string contains single quotes, they need to be escaped with a backslash ( \\ ):  // Escape single quotes within strings:\n'Note the backslash before the \\'single quotes\\'';", 
            "title": "Strings"
        }, 
        {
            "location": "/javascript/js-coding-standards/#switch-statements", 
            "text": "The usage of  switch  statements is generally discouraged, but can be useful when there are a large number of cases \u2013 especially when multiple cases can be handled by the same block, or fall-through logic (the  default  case) can be leveraged.  When using  switch  statements:  \u2013 Use a  break  for each case other than  default . When allowing statements to \u201cfall through,\u201d note that explicitly.\n\u2013 Indent  case  statements one tab within the  switch .  switch ( event.keyCode ) {\n\n    // ENTER and SPACE both trigger x()\n    case $.ui.keyCode.ENTER:\n    case $.ui.keyCode.SPACE:\n        x();\n        break;\n    case $.ui.keyCode.ESCAPE:\n        y();\n        break;\n    default:\n        z();\n}  It is not recommended to return a value from within a switch statement: use the  case  blocks to set values, then  return  those values at the end.  function getKeyCode( keyCode ) {\n    var result;\n\n    switch ( event.keyCode ) {\n        case $.ui.keyCode.ENTER:\n        case $.ui.keyCode.SPACE:\n            result = 'commit';\n            break;\n        case $.ui.keyCode.ESCAPE:\n            result = 'exit';\n            break;\n        default:\n            result = 'default';\n    }\n\n    return result;\n}", 
            "title": "Switch Statements"
        }, 
        {
            "location": "/javascript/js-coding-standards/#best-practices", 
            "text": "Use strict  All new code should  use strict  (unless there's a very good reason not to).  Arrays  Creating arrays in JavaScript should be done using the shorthand  []  constructor rather than the  new Array()  notation.  var myArray = [];  You can initialize an array during construction:  var myArray = [ 1, 'WordPress', 2, 'Blog' ];  In JavaScript, associative arrays are defined as objects.  Objects  There are many ways to create objects in JavaScript. Object literal notation,  {} , is both the most performant, and also the easiest to read.  var myObj = {};  Object literal notation should be used unless the object requires a specific prototype, in which case the object should be created by calling a constructor function with  new .  var myObj = new ConstructorMethod();  Object properties should be accessed via dot notation, unless the key is a variable, a reserved word, or a string that would not be a valid identifier:  prop = object.propertyName;\nprop = object[ variableKey ];\nprop = object['default'];\nprop = object['key-with-hyphens'];  \u201cYoda\u201d Conditions  One area we disagree with the Wordpress standard is Yoda Conditions... we'd prefer you didn't use them.   It's easier to read conditionals in the normal order  if ( something === true ) , just remember to use the correct number of equals signs.  Iteration  When iterating over a large collection using a  for  loop, it is recommended to store the loop\u2019s max value as a variable rather than re-computing the maximum every time:  // Good   Efficient\nvar i, max;\n\n// getItemCount() gets called once\nfor ( i = 0, max = getItemCount(); i   max; i++ ) {\n    // Do stuff\n}\n\n// Bad   Potentially Inefficient:\n// getItemCount() gets called every time\nfor ( i = 0; i   getItemCount(); i++ ) {\n    // Do stuff\n}  Underscore.js Collection Functions  Learn and understand Underscore\u2019s  collection and array methods . These functions, including  _.each ,  _.map , and  _.reduce , allow for efficient, readable transformations of large data sets.  Underscore also permits jQuery-style chaining with regular JavaScript objects:  var obj = {\n    first: 'thing 1',\n    second: 'thing 2',\n    third: 'lox'\n};\n\nvar arr = _.chain( obj )\n    .keys()\n    .map(function( key ) {\n        return key + ' comes ' + obj[ key ];\n    })\n    // Exit the chain\n    .value();\n\n// arr === [ 'first comes thing 1', 'second comes thing 2', 'third comes lox' ]  Iterating Over jQuery Collections  $tabs.each(function( index, element ) {\n    var $element = $( element );\n\n    // Do stuff to $element\n});", 
            "title": "Best Practices"
        }, 
        {
            "location": "/javascript/js-documentation-standards/", 
            "text": "JavaScript Documentation Standards\n\n\nSee the following:\n\n\n\n\nJSDoc 3 reference: \nhttp://usejsdoc.org/\n\n\nWordpress: \nhttps://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/javascript/", 
            "title": "JavaScript Documentation Standards"
        }, 
        {
            "location": "/javascript/js-documentation-standards/#javascript-documentation-standards", 
            "text": "See the following:   JSDoc 3 reference:  http://usejsdoc.org/  Wordpress:  https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/javascript/", 
            "title": "JavaScript Documentation Standards"
        }, 
        {
            "location": "/html/", 
            "text": "HTML Coding Standards\n\n\nHTML code standards adapted from \nFellowship Tech Code Standards\n (CC license).\n\n\nValidation\n\n\nAll HTML pages should be verified against the \nW3C validator\n to ensure that the markup is well formed. This in and of itself is not directly indicative of good code, but it helps to weed out problems that are able to be tested via automation. It is no substitute for manual code review.\n\n\nSelf-closing Elements\n\n\nAll tags must be properly closed. For tags that can wrap nodes such as text or other elements, termination is a trivial enough task. For tags that are self-closing, the forward slash should have exactly one space preceding it:\n\n\nbr /\n\n\n\n\n\nrather than the compact but incorrect:\n\n\nbr/\n\n\n\n\n\nThe W3C specifies that a single space should precede the self-closing slash (\nsource\n).\n\n\nAttributes and Tags\n\n\nAll tags and attributes must be written in lowercase. Additionally, attribute values should be lowercase when the purpose of the text therein is only to be interpreted by machines. For instances in which the data needs to be human readable, proper title capitalization should be followed.\n\n\nFor machines:\n\n\nmeta http-equiv=\ncontent-type\n content=\ntext/html; charset=utf-8\n /\n\n\n\n\n\nFor humans:\n\n\na href=\nhttp://example.com/\n title=\nDescription Here\nExample.com\n/a\n\n\n\n\n\nQuotes\n\n\nAccording to the W3C specifications for XHTML, all attributes must have a value, and must use double- or single-quotes (\nsource\n). The following are examples of proper and improper usage of quotes and attribute/value pairs.\n\n\nCorrect:\n\n\ninput type=\ntext\n name=\nemail\n disabled=\ndisabled\n /\n\n\ninput type='text' name='email' disabled='disabled' /\n\n\n\n\n\nIncorrect:\n\n\ninput type=text name=email disabled\n\n\n\n\n\nIn HTML, attributes do not all have to have values, and attribute values do not always have to be quoted. While all of the examples above are valid HTML, failing to quote attributes can lead to security vulnerabilities. Always quote attributes.\n\n\nIndentation\n\n\nAs with PHP, HTML indentation should always reflect logical structure. Use tabs and not spaces.\n\n\nWhen mixing PHP and HTML together, indent PHP blocks to match the surrounding HTML code. Closing PHP blocks should match the same indentation level as the opening block.\n\n\nCorrect:\n\n\n?php if ( ! have_posts() ) : ?\n\n    \ndiv id=\npost-1\n class=\npost\n\n        \nh1 class=\nentry-title\nNot Found\n/h1\n\n        \ndiv class=\nentry-content\n\n            \np\nApologies, but no results were found.\n/p\n\n            \n?php get_search_form(); ?\n\n        \n/div\n\n    \n/div\n\n\n?php endif; ?\n\n\n\n\n\nIncorrect:\n\n\n        \n?php if ( ! have_posts() ) : ?\n\n        \ndiv id=\npost-0\n class=\npost error404 not-found\n\n            \nh1 class=\nentry-title\nNot Found\n/h1\n\n            \ndiv class=\nentry-content\n\n            \np\nApologies, but no results were found.\n/p\n\n\n?php get_search_form(); ?\n\n            \n/div\n\n        \n/div\n\n\n?php endif; ?", 
            "title": "HTML"
        }, 
        {
            "location": "/html/#html-coding-standards", 
            "text": "HTML code standards adapted from  Fellowship Tech Code Standards  (CC license).", 
            "title": "HTML Coding Standards"
        }, 
        {
            "location": "/html/#validation", 
            "text": "All HTML pages should be verified against the  W3C validator  to ensure that the markup is well formed. This in and of itself is not directly indicative of good code, but it helps to weed out problems that are able to be tested via automation. It is no substitute for manual code review.", 
            "title": "Validation"
        }, 
        {
            "location": "/html/#self-closing-elements", 
            "text": "All tags must be properly closed. For tags that can wrap nodes such as text or other elements, termination is a trivial enough task. For tags that are self-closing, the forward slash should have exactly one space preceding it:  br /   rather than the compact but incorrect:  br/   The W3C specifies that a single space should precede the self-closing slash ( source ).", 
            "title": "Self-closing Elements"
        }, 
        {
            "location": "/html/#attributes-and-tags", 
            "text": "All tags and attributes must be written in lowercase. Additionally, attribute values should be lowercase when the purpose of the text therein is only to be interpreted by machines. For instances in which the data needs to be human readable, proper title capitalization should be followed.  For machines:  meta http-equiv= content-type  content= text/html; charset=utf-8  /   For humans:  a href= http://example.com/  title= Description Here Example.com /a", 
            "title": "Attributes and Tags"
        }, 
        {
            "location": "/html/#quotes", 
            "text": "According to the W3C specifications for XHTML, all attributes must have a value, and must use double- or single-quotes ( source ). The following are examples of proper and improper usage of quotes and attribute/value pairs.  Correct:  input type= text  name= email  disabled= disabled  /  input type='text' name='email' disabled='disabled' /   Incorrect:  input type=text name=email disabled   In HTML, attributes do not all have to have values, and attribute values do not always have to be quoted. While all of the examples above are valid HTML, failing to quote attributes can lead to security vulnerabilities. Always quote attributes.", 
            "title": "Quotes"
        }, 
        {
            "location": "/html/#indentation", 
            "text": "As with PHP, HTML indentation should always reflect logical structure. Use tabs and not spaces.  When mixing PHP and HTML together, indent PHP blocks to match the surrounding HTML code. Closing PHP blocks should match the same indentation level as the opening block.  Correct:  ?php if ( ! have_posts() ) : ? \n     div id= post-1  class= post \n         h1 class= entry-title Not Found /h1 \n         div class= entry-content \n             p Apologies, but no results were found. /p \n             ?php get_search_form(); ? \n         /div \n     /div  ?php endif; ?   Incorrect:           ?php if ( ! have_posts() ) : ? \n         div id= post-0  class= post error404 not-found \n             h1 class= entry-title Not Found /h1 \n             div class= entry-content \n             p Apologies, but no results were found. /p  ?php get_search_form(); ? \n             /div \n         /div  ?php endif; ?", 
            "title": "Indentation"
        }, 
        {
            "location": "/css/", 
            "text": "CSS Coding Standards\n\n\nStructure\n\n\nThere are plenty of different methods for structuring a stylesheet. It is important to retain a high degree of legibility. This enables subsequent contributors to have a clear understanding of the flow of the document.\n\n\n\n\nUse tabs, not spaces, to indent each property.\n\n\nAdd two blank lines between sections and one blank line between blocks in a section.\n\n\nEach selector should be on its own line, ending in either a comma or an opening curly brace. Property-value pairs should be on their own line, with one tab of indentation and an ending semicolon. The closing brace should be flush left, using the same level of indentation as the opening selector.\n\n\n\n\nCorrect:\n\n\n#selector-1,\n#selector-2,\n#selector-3 {\n    background: #fff;\n    color: #000;\n}\n\n\n\n\n#selector-1, #selector-2, #selector-3 {\n    background: #fff;\n    color: #000;\n    }\n\n#selector-1 { background: #fff; color: #000; }\n\n\n\n\nSelectors\n\n\nWith specificity, comes great responsibility. Broad selectors allow us to be efficient, yet can have adverse consequences if not tested. Location-specific selectors can save us time, but will quickly lead to a cluttered stylesheet. Exercise your best judgement to create selectors that find the right balance between contributing to the overall style and layout of the DOM.\n\n\n\n\nUse lowercase and separate words with hyphens when naming selectors. Avoid camelcase and underscores.\n\n\nUse human readable selectors that describe what element(s) they style.\n\n\nAttribute selectors should use double quotes around values\n\n\nRefrain from using over-qualified selectors, div.container can simply be stated as .container\n\n\n\n\nCorrect:\n\n\n#comment-form {\n    margin: 1em 0;\n}\n\ninput[type=\ntext\n] {\n    line-height: 1.1;\n}\n\n\n\n\nIncorrect:\n\n\n#commentForm { /* Avoid camelcase. */\n    margin: 0;\n}\n\n#comment_form { /* Avoid underscores. */\n    margin: 0;\n}\n\ndiv#comment_form { /* Avoid over-qualification. */\n    margin: 0;\n}\n\n#c1-xr { /* What is a c1-xr?! Use a better name. */\n    margin: 0;\n}\n\ninput[type=text] { /* Should be [type=\ntext\n] */\n    line-height: 110% /* Also doubly incorrect */\n}\n\n\n\n\nProperties\n\n\nSimilar to selectors, properties that are too specific will hinder the flexibility of the design. Less is more. Make sure you are not repeating styling or introducing fixed dimensions (when a fluid solution is more acceptable).\n\n\n\n\nProperties should be followed by a colon and a space.\n\n\nAll properties and values should be lowercase, except for font names and vendor-specific properties.\n\n\nUse hex code for colors, or rgba() if opacity is needed. Avoid RGB format and uppercase, and shorten values when possible: #fff instead of #FFFFFF.\n\n\nUse shorthand (except when overriding styles) for background, border, font, list-style, margin, and padding values as much as possible. (For a shorthand reference, see \nCSS Shorthand\n.)\n\n\n\n\nProperty Ordering\n\n\n\n\n\u201cGroup like properties together, especially if you have a lot of them.\u201d\n\u2014 Nacin\n\n\n\n\nAbove all else, choose something that is meaningful to you and semantic in some way. Random ordering is chaos, not poetry. In WordPress Core, our choice is logical or grouped ordering, wherein properties are grouped by meaning and ordered specifically within those groups. The properties within groups are also strategically ordered to create transitions between sections, such as background directly before color. The baseline for ordering is:\n\n\n\n\nDisplay\n\n\nPositioning\n\n\nBox model\n\n\nColors and Typography\n\n\nOther\n\n\n\n\nThings that are not yet used in core itself, such as CSS3 animations, may not have a prescribed place above but likely would fit into one of the above in a logical manner. Just as CSS is evolving, so our standards will evolve with it.\n\n\nTop/Right/Bottom/Left (TRBL/trouble) should be the order for any relevant properties (e.g. margin), much as the order goes in values. Corner specifiers (e.g. border-radius-\n-\n) should be top-left, top-right, bottom-right, bottom-left. This is derived from how shorthand values would be ordered.\n\n\nExample:\n\n\n#overlay {\n    position: absolute;\n    z-index: 1;\n    padding: 10px;\n    background: #fff;\n    color: #777;\n}\n\n\n\n\nAnother method that is often used, including by the Automattic/WordPress.com Themes Team, is to order properties alphabetically, with or without certain exceptions.\n\n\nExample:\n\n\n#overlay {\n    background: #fff;\n    color: #777;\n    padding: 10px;\n    position: absolute;\n    z-index: 1;\n}\n\n\n\n\nVendor Prefixes\n\n\nVendor prefixes should go longest (-webkit-) to shortest (unprefixed). All other spacing remains as per the rest of standards.\n\n\n.sample-output {\n    -webkit-box-shadow: inset 0 0 1px 1px #eee;\n    -moz-box-shadow: inset 0 0 1px 1px #eee;\n    box-shadow: inset 0 0 1px 1px #eee;\n}\n\n\n\n\nValues\n\n\nThere are numerous ways to input values for properties. Follow the guidelines below to help us retain a high degree of consistency.\n\n\n\n\nSpace before the value, after the colon\n\n\nDo not pad parentheses with spaces\n\n\nAlways end in a semicolon\n\n\nUse double quotes rather than single quotes, and only when needed, such as when a font name has a space.\n\n\n0 values should not have units unless necessary, such as with transition-duration.\n\n\nLine height should also be unit-less, unless necessary to be defined as a specific pixel value. This is more than just a style convention, but is worth mentioning here. More information: \nhttp://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n\n\nUse a leading zero for decimal values, including in rgba().\n\n\nMultiple comma-separated values for one property should be separated by either a space or a newline, including within rgba(). Newlines should be used for lengthier multi-part values such as those for shorthand properties like box-shadow and text-shadow. Each subsequent value after the first should then be on a new line, indented to the same level as the selector and then spaced over to left-align with the previous value.\n\n\n\n\nCorrect:\n\n\n.class { /* Correct usage of quotes */\n    background-image: url(images/bg.png);\n    font-family: \nHelvetica Neue\n, sans-serif;\n}\n\n.class { /* Correct usage of zero values */\n    font-family: Georgia, serif;\n    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.5),\n                       0 1px 0 #fff;\n}\n\n\n\n\nIncorrect:\n\n\n.class { /* Avoid missing space and semicolon */\n    background:#fff\n}\n\n.class { /* Avoid adding a unit on a zero value */\n    margin: 0px 0px 20px 0px;\n}\n\n\n\n\nMedia Queries\n\n\nMedia queries allow us to gracefully degrade the DOM for different screen sizes. If you are adding any, be sure to test above and below the break-point you are targeting.\n\n\n\n\nIt is generally advisable to keep media queries grouped by media at the bottom of the stylesheet.\n\n\nAn exception is made for the wp-admin.css file in core, as it is very large and each section essentially represents a stylesheet of its own. Media queries are therefore added at the bottom of sections as applicable.\n\n\n\n\n\n\nRule sets for media queries should be indented one level in.\n\n\n\n\nExample:\n\n\n@media all and (max-width: 699px) and (min-width: 520px) {\n\n        /* Your selectors */\n}\n\n\n\n\nCommenting\n\n\n\n\nComment, and comment liberally. If there are concerns about file size, utilize minified files and the SCRIPT_DEBUG constant. Long comments should manually break the line length at 80 characters.\n\n\nA table of contents should be utilized for longer stylesheets, especially those that are highly sectioned. Using an index number (1.0, 1.1, 2.0, etc.) aids in searching and jumping to a location.\n\n\nComments should be formatted much as PHPDoc is. The \nCSSDoc\n standard is not necessarily widely accepted or used but some aspects of it may be adopted over time. Section/subsection headers should have newlines before and after. Inline comments should not have empty newlines separating the comment from the item to which it relates.\n\n\n\n\nFor sections and subsections:\n\n\n/**\n* #.# Section title\n*\n* Description of section, whether or not it has media queries, etc.\n*/\n\n.selector {\n    float: left;\n}\n\n\n\n\nFor inline:\n\n\n/* This is a comment about this selector */\n.another-selector {\n    position: absolute;\n    top: 0 !important; /* I should explain why this is so !important */\n}\n\n\n\n\nBest Practices\n\n\nStylesheets tend to get long in length. Focus slowly gets lost whilst intended goals start repeating and overlapping. Writing smart code from the outset helps us retain the overview whilst remaining flexible throughout change.\n\n\n\n\nIf you are attempting to fix an issue, attempt to remove code before adding more.\n\n\nMagic Numbers are unlucky. These are numbers that are used as quick fixes on a one-off basis. Example: .box { margin-top: 37px }.\n\n\nDOM will change over time, target the element you want to use as opposed to \u201cfinding it\u201d through its parents. Example: Use .highlight on the element as opposed to .highlight a (where the selector is on the parent)\n\n\nKnow when to use the height property. It should be used when you are including outside elements (such as images). Otherwise use line-height for more flexibility.\n\n\nDo not restate default property \n value combinations (for instance \ndisplay: block;\n on block-level elements).", 
            "title": "CSS"
        }, 
        {
            "location": "/css/#css-coding-standards", 
            "text": "", 
            "title": "CSS Coding Standards"
        }, 
        {
            "location": "/css/#structure", 
            "text": "There are plenty of different methods for structuring a stylesheet. It is important to retain a high degree of legibility. This enables subsequent contributors to have a clear understanding of the flow of the document.   Use tabs, not spaces, to indent each property.  Add two blank lines between sections and one blank line between blocks in a section.  Each selector should be on its own line, ending in either a comma or an opening curly brace. Property-value pairs should be on their own line, with one tab of indentation and an ending semicolon. The closing brace should be flush left, using the same level of indentation as the opening selector.   Correct:  #selector-1,\n#selector-2,\n#selector-3 {\n    background: #fff;\n    color: #000;\n}  #selector-1, #selector-2, #selector-3 {\n    background: #fff;\n    color: #000;\n    }\n\n#selector-1 { background: #fff; color: #000; }", 
            "title": "Structure"
        }, 
        {
            "location": "/css/#selectors", 
            "text": "With specificity, comes great responsibility. Broad selectors allow us to be efficient, yet can have adverse consequences if not tested. Location-specific selectors can save us time, but will quickly lead to a cluttered stylesheet. Exercise your best judgement to create selectors that find the right balance between contributing to the overall style and layout of the DOM.   Use lowercase and separate words with hyphens when naming selectors. Avoid camelcase and underscores.  Use human readable selectors that describe what element(s) they style.  Attribute selectors should use double quotes around values  Refrain from using over-qualified selectors, div.container can simply be stated as .container   Correct:  #comment-form {\n    margin: 1em 0;\n}\n\ninput[type= text ] {\n    line-height: 1.1;\n}  Incorrect:  #commentForm { /* Avoid camelcase. */\n    margin: 0;\n}\n\n#comment_form { /* Avoid underscores. */\n    margin: 0;\n}\n\ndiv#comment_form { /* Avoid over-qualification. */\n    margin: 0;\n}\n\n#c1-xr { /* What is a c1-xr?! Use a better name. */\n    margin: 0;\n}\n\ninput[type=text] { /* Should be [type= text ] */\n    line-height: 110% /* Also doubly incorrect */\n}", 
            "title": "Selectors"
        }, 
        {
            "location": "/css/#properties", 
            "text": "Similar to selectors, properties that are too specific will hinder the flexibility of the design. Less is more. Make sure you are not repeating styling or introducing fixed dimensions (when a fluid solution is more acceptable).   Properties should be followed by a colon and a space.  All properties and values should be lowercase, except for font names and vendor-specific properties.  Use hex code for colors, or rgba() if opacity is needed. Avoid RGB format and uppercase, and shorten values when possible: #fff instead of #FFFFFF.  Use shorthand (except when overriding styles) for background, border, font, list-style, margin, and padding values as much as possible. (For a shorthand reference, see  CSS Shorthand .)   Property Ordering   \u201cGroup like properties together, especially if you have a lot of them.\u201d\n\u2014 Nacin   Above all else, choose something that is meaningful to you and semantic in some way. Random ordering is chaos, not poetry. In WordPress Core, our choice is logical or grouped ordering, wherein properties are grouped by meaning and ordered specifically within those groups. The properties within groups are also strategically ordered to create transitions between sections, such as background directly before color. The baseline for ordering is:   Display  Positioning  Box model  Colors and Typography  Other   Things that are not yet used in core itself, such as CSS3 animations, may not have a prescribed place above but likely would fit into one of the above in a logical manner. Just as CSS is evolving, so our standards will evolve with it.  Top/Right/Bottom/Left (TRBL/trouble) should be the order for any relevant properties (e.g. margin), much as the order goes in values. Corner specifiers (e.g. border-radius- - ) should be top-left, top-right, bottom-right, bottom-left. This is derived from how shorthand values would be ordered.  Example:  #overlay {\n    position: absolute;\n    z-index: 1;\n    padding: 10px;\n    background: #fff;\n    color: #777;\n}  Another method that is often used, including by the Automattic/WordPress.com Themes Team, is to order properties alphabetically, with or without certain exceptions.  Example:  #overlay {\n    background: #fff;\n    color: #777;\n    padding: 10px;\n    position: absolute;\n    z-index: 1;\n}  Vendor Prefixes  Vendor prefixes should go longest (-webkit-) to shortest (unprefixed). All other spacing remains as per the rest of standards.  .sample-output {\n    -webkit-box-shadow: inset 0 0 1px 1px #eee;\n    -moz-box-shadow: inset 0 0 1px 1px #eee;\n    box-shadow: inset 0 0 1px 1px #eee;\n}", 
            "title": "Properties"
        }, 
        {
            "location": "/css/#values", 
            "text": "There are numerous ways to input values for properties. Follow the guidelines below to help us retain a high degree of consistency.   Space before the value, after the colon  Do not pad parentheses with spaces  Always end in a semicolon  Use double quotes rather than single quotes, and only when needed, such as when a font name has a space.  0 values should not have units unless necessary, such as with transition-duration.  Line height should also be unit-less, unless necessary to be defined as a specific pixel value. This is more than just a style convention, but is worth mentioning here. More information:  http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/  Use a leading zero for decimal values, including in rgba().  Multiple comma-separated values for one property should be separated by either a space or a newline, including within rgba(). Newlines should be used for lengthier multi-part values such as those for shorthand properties like box-shadow and text-shadow. Each subsequent value after the first should then be on a new line, indented to the same level as the selector and then spaced over to left-align with the previous value.   Correct:  .class { /* Correct usage of quotes */\n    background-image: url(images/bg.png);\n    font-family:  Helvetica Neue , sans-serif;\n}\n\n.class { /* Correct usage of zero values */\n    font-family: Georgia, serif;\n    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.5),\n                       0 1px 0 #fff;\n}  Incorrect:  .class { /* Avoid missing space and semicolon */\n    background:#fff\n}\n\n.class { /* Avoid adding a unit on a zero value */\n    margin: 0px 0px 20px 0px;\n}", 
            "title": "Values"
        }, 
        {
            "location": "/css/#media-queries", 
            "text": "Media queries allow us to gracefully degrade the DOM for different screen sizes. If you are adding any, be sure to test above and below the break-point you are targeting.   It is generally advisable to keep media queries grouped by media at the bottom of the stylesheet.  An exception is made for the wp-admin.css file in core, as it is very large and each section essentially represents a stylesheet of its own. Media queries are therefore added at the bottom of sections as applicable.    Rule sets for media queries should be indented one level in.   Example:  @media all and (max-width: 699px) and (min-width: 520px) {\n\n        /* Your selectors */\n}", 
            "title": "Media Queries"
        }, 
        {
            "location": "/css/#commenting", 
            "text": "Comment, and comment liberally. If there are concerns about file size, utilize minified files and the SCRIPT_DEBUG constant. Long comments should manually break the line length at 80 characters.  A table of contents should be utilized for longer stylesheets, especially those that are highly sectioned. Using an index number (1.0, 1.1, 2.0, etc.) aids in searching and jumping to a location.  Comments should be formatted much as PHPDoc is. The  CSSDoc  standard is not necessarily widely accepted or used but some aspects of it may be adopted over time. Section/subsection headers should have newlines before and after. Inline comments should not have empty newlines separating the comment from the item to which it relates.   For sections and subsections:  /**\n* #.# Section title\n*\n* Description of section, whether or not it has media queries, etc.\n*/\n\n.selector {\n    float: left;\n}  For inline:  /* This is a comment about this selector */\n.another-selector {\n    position: absolute;\n    top: 0 !important; /* I should explain why this is so !important */\n}", 
            "title": "Commenting"
        }, 
        {
            "location": "/css/#best-practices", 
            "text": "Stylesheets tend to get long in length. Focus slowly gets lost whilst intended goals start repeating and overlapping. Writing smart code from the outset helps us retain the overview whilst remaining flexible throughout change.   If you are attempting to fix an issue, attempt to remove code before adding more.  Magic Numbers are unlucky. These are numbers that are used as quick fixes on a one-off basis. Example: .box { margin-top: 37px }.  DOM will change over time, target the element you want to use as opposed to \u201cfinding it\u201d through its parents. Example: Use .highlight on the element as opposed to .highlight a (where the selector is on the parent)  Know when to use the height property. It should be used when you are including outside elements (such as images). Otherwise use line-height for more flexibility.  Do not restate default property   value combinations (for instance  display: block;  on block-level elements).", 
            "title": "Best Practices"
        }
    ]
}